// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  name          String?
  email         String          @unique
  password      String?
  number        BigInt?
  role          Role
  profile       Profile?
  purchases     UserPurchases[]
  videoProgress VideoProgress[]
  comments      Comment[]
  certificate   Certificate[]
  bookmarks     Bookmark[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

model Course {
  id              Int             @id @default(autoincrement())
  title           String
  description     String
  price           Float
  imageUrl        String
  content         CourseContent[]
  purchasedBy     UserPurchases[]
  certificate     Certificate[]
  certIssued      Boolean         @default(false)
}

model UserPurchases {
  id         Int      @id @default(autoincrement())
  userId     Int
  courseId   Int
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())
}

model Certificate {
  id       String  @id @default(cuid())
  slug     String  @default("certId")
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  Course   Course? @relation(fields: [courseId], references: [id])
  courseId Int?
}

model Content {
  id               Int             @id @default(autoincrement())
  type             String          @default("text")
  title            String
  description      String?
  thumbnail        String?
  parentId         Int?
  parent           Content?        @relation("ContentToContent", fields: [parentId], references: [id])
  videoProgress    VideoProgress[]
  children         Content[]       @relation("ContentToContent")
  courses          CourseContent[]
  createdAt        DateTime        @default(now())
  VideoMetaData    VideoMetadata?
  NotionMetaData   NotionMetadata?
  notionMetaDataId Int?
  comments         Comment[]
  commentCount     Int             @default(0)
  bookmark         Bookmark[]
}

model CourseContent {
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
  content   Content @relation(fields: [contentId], references: [id])
  contentId Int

  @@id([courseId, contentId])
}

model NotionMetadata {
  id        Int     @id @default(autoincrement())
  contentId Int
  content   Content @relation(fields: [contentId], references: [id])
  notionId  String

  @@unique([contentId])
}

model VideoMetadata {
  id                         Int             @id @default(autoincrement())
  contentId                  Int
  video_Link                 String?
  segments                   Json?
  content                    Content         @relation(fields: [contentId], references: [id])
  slides                     String? // link to slides
  thumbnail_mosiac_url       String?
  duration                   Int?
  migration_status           MigrationStatus @default(NOT_MIGRATED)
  migration_pickup_time      DateTime?
  migrated_video_1080p_mp4_1 String?
  migrated_video_360p_mp4_1  String?
  migrated_video_720p_mp4_1  String?
  original_mp4_url           String?
  transcoded                 Boolean         @default(false)

  @@unique([contentId])
}

model VideoProgress {
  id               Int      @id @default(autoincrement())
  userId           Int
  contentId        Int
  currentTimestamp Int
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content          Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  markAsCompleted  Boolean  @default(false)
  updatedAt        DateTime @default(now()) @updatedAt

  @@unique([contentId, userId])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    Int
  contentId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   Content  @relation(fields: [contentId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id           Int         @id @default(autoincrement())
  content      String
  commentType  CommentType @default(DEFAULT)
  approved     Boolean     @default(false)
  contentId    Int
  commentedOn  Content     @relation(fields: [contentId], references: [id])
  parentId     Int?
  parent       Comment?    @relation("ParentComment", fields: [parentId], references: [id])
  children     Comment[]   @relation("ParentComment")
  userId       Int
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  upvotes      Int         @default(0)
  downvotes    Int         @default(0)
  repliesCount Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  isPinned     Boolean     @default(false)
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum CommentType {
  DEFAULT
  INTRO
}

enum MigrationStatus {
  NOT_MIGRATED
  IN_PROGRESS
  MIGRATED
  MIGRATION_ERROR
}
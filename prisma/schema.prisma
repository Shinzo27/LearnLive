// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  token         String?
  sessions      Session[]
  purchases     UserPurchases[]
  videoProgress VideoProgress[]
  comments      Comment[]
  votes         Vote[]
  bookmarks     Bookmark[]
  password      String?
  questions     Question[]
  answers       Answer[]
  certificate   Certificate[]
}

model Course {
  id              Int             @id @default(autoincrement())
  title           String
  imageUrl        String
  description     String
  openToEveryone  Boolean         @default(false)
  slug            String
  content         CourseContent[]
  purchasedBy     UserPurchases[]
  certificate     Certificate[]
  certIssued      Boolean         @default(false)
}

model UserPurchases {
  userId     String
  courseId   Int
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([userId, courseId])
}

model Certificate {
  id       String  @id @default(cuid())
  slug     String  @default("certId")
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  Course   Course? @relation(fields: [courseId], references: [id])
  courseId Int?
}

model Content {
  id               Int             @id @default(autoincrement())
  type             String          @default("text")
  title            String
  hidden           Boolean         @default(false)
  description      String?
  thumbnail        String?
  parentId         Int?
  parent           Content?        @relation("ContentToContent", fields: [parentId], references: [id])
  videoProgress    VideoProgress[]
  children         Content[]       @relation("ContentToContent")
  courses          CourseContent[]
  createdAt        DateTime        @default(now())
  VideoMetaData    VideoMetadata?
  NotionMetaData   NotionMetadata?
  notionMetaDataId Int?
  comments         Comment[]
  commentCount     Int             @default(0)
  bookmark         Bookmark[]
}

model CourseContent {
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  Int
  content   Content @relation(fields: [contentId], references: [id])
  contentId Int

  @@id([courseId, contentId])
}

model NotionMetadata {
  id        Int     @id @default(autoincrement())
  contentId Int
  content   Content @relation(fields: [contentId], references: [id])
  notionId  String

  @@unique([contentId])
}

model VideoMetadata {
  id                         Int             @id @default(autoincrement())
  contentId                  Int
  video_1080p_mp4_1          String? // Link to 1080p mp4 quality video variant 1
  video_1080p_mp4_2          String? // Link to 1080p mp4 quality video variant 2
  video_1080p_mp4_3          String? // Link to 1080p mp4 quality video variant 3
  video_1080p_mp4_4          String? // Link to 1080p mp4 quality video variant 4
  video_1080p_1              String? // Link to 1080p quality video variant 1
  video_1080p_2              String? // Link to 1080p quality video variant 2
  video_1080p_3              String? // Link to 1080p quality video variant 3
  video_1080p_4              String? // Link to 1080p quality video variant 4
  video_720p_mp4_1           String? // Link to 720p mp4 quality video variant 1
  video_720p_mp4_2           String? // Link to 720p mp4 quality video variant 2
  video_720p_mp4_3           String? // Link to 720p mp4 quality video variant 3
  video_720p_mp4_4           String? // Link to 720p mp4 quality video variant 4
  video_720p_1               String? // Link to 720p quality video variant 1
  video_720p_2               String? // Link to 720p quality video variant 2
  video_720p_3               String? // Link to 720p quality video variant 3
  video_720p_4               String? // Link to 720p quality video variant 4
  video_360p_mp4_1           String? // Link to 360p mp4 quality video variant 1
  video_360p_mp4_2           String? // Link to 360p mp4 quality video variant 2
  video_360p_mp4_3           String? // Link to 360p mp4 quality video variant 3
  video_360p_mp4_4           String? // Link to 360p mp4 quality video variant 4
  video_360p_1               String? // Link to 360p quality video variant 1
  video_360p_2               String? // Link to 360p quality video variant 2
  video_360p_3               String? // Link to 360p quality video variant 3
  video_360p_4               String? // Link to 360p quality video variant 4
  subtitles                  String? // Link to subtitles file
  subtitle_tried             Int             @default(0) //Count of subtitle transcoding tries
  segments                   Json?
  content                    Content         @relation(fields: [contentId], references: [id])
  slides                     String? // link to slides
  thumbnail_mosiac_url       String?
  duration                   Int?
  migration_status           MigrationStatus @default(NOT_MIGRATED)
  migration_pickup_time      DateTime?
  migrated_video_1080p_mp4_1 String?
  migrated_video_360p_mp4_1  String?
  migrated_video_720p_mp4_1  String?
  original_mp4_url           String?
  transcoded                 Boolean         @default(false)

  @@unique([contentId])
}

model VideoProgress {
  id               Int      @id @default(autoincrement())
  userId           String
  contentId        Int
  currentTimestamp Int
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content          Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  markAsCompleted  Boolean  @default(false)
  updatedAt        DateTime @default(now()) @updatedAt

  @@unique([contentId, userId])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    String
  contentId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   Content  @relation(fields: [contentId], references: [id])
  createdAt DateTime @default(now())
}

model Comment {
  id           Int         @id @default(autoincrement())
  content      String
  commentType  CommentType @default(DEFAULT)
  approved     Boolean     @default(false)
  contentId    Int
  commentedOn  Content     @relation(fields: [contentId], references: [id])
  parentId     Int?
  parent       Comment?    @relation("ParentComment", fields: [parentId], references: [id])
  children     Comment[]   @relation("ParentComment")
  userId       String
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  upvotes      Int         @default(0)
  downvotes    Int         @default(0)
  repliesCount Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  votes        Vote[]
  isPinned     Boolean     @default(false)
}

model Vote {
  id         Int       @id @default(autoincrement())
  questionId Int?
  question   Question? @relation(fields: [questionId], references: [id])
  answerId   Int?
  answer     Answer?   @relation(fields: [answerId], references: [id])
  commentId  Int?
  comment    Comment?  @relation(fields: [commentId], references: [id])
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  voteType   VoteType
  createdAt  DateTime  @default(now())

  @@unique([questionId, userId])
  @@unique([answerId, userId])
  @@unique([commentId, userId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum CommentType {
  DEFAULT
  INTRO
}

enum MigrationStatus {
  NOT_MIGRATED
  IN_PROGRESS
  MIGRATED
  MIGRATION_ERROR
}

model Question {
  id           Int      @id @default(autoincrement())
  title        String
  content      String
  slug         String   @unique
  createdAt    DateTime @default(now())
  author       User     @relation(fields: [authorId], references: [id])
  authorId     String
  upvotes      Int      @default(0)
  downvotes    Int      @default(0)
  totalanswers Int      @default(0)
  answers      Answer[]
  votes        Vote[]
  tags         String[]
  updatedAt    DateTime @updatedAt

  @@index([authorId])
}

model Answer {
  id           Int      @id @default(autoincrement())
  content      String
  createdAt    DateTime @default(now())
  question     Question @relation(fields: [questionId], references: [id])
  questionId   Int
  author       User     @relation(fields: [authorId], references: [id])
  authorId     String
  votes        Vote[]
  upvotes      Int      @default(0)
  downvotes    Int      @default(0)
  totalanswers Int      @default(0)
  parentId     Int?
  responses    Answer[] @relation("AnswerToAnswer")
  parent       Answer?  @relation("AnswerToAnswer", fields: [parentId], references: [id])
  updatedAt    DateTime @updatedAt

  @@index([questionId])
  @@index([authorId])
  @@index([parentId])
}

model Session {
  id        Int      @id @default(autoincrement())
  sesionId  String   @unique
  userId    String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}